#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÊÄßËÉΩÁõëÊéßÂ∑•ÂÖ∑
Áî®‰∫éÂàÜÊûêÂç°ÁâáÁîüÊàêÂêÑÁéØËäÇÁöÑËÄóÊó∂
"""

import time
import functools
from datetime import datetime
from collections import defaultdict
import threading

class PerformanceMonitor:
    """ÊÄßËÉΩÁõëÊéßÂô®"""
    
    def __init__(self):
        self.timers = defaultdict(list)
        self.counters = defaultdict(int)
        self.lock = threading.Lock()
    
    def timer(self, name):
        """ÊÄßËÉΩËÆ°Êó∂Ë£ÖÈ•∞Âô®"""
        def decorator(func):
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                start_time = time.time()
                try:
                    result = func(*args, **kwargs)
                    return result
                finally:
                    duration = (time.time() - start_time) * 1000  # ËΩ¨Êç¢‰∏∫ÊØ´Áßí
                    with self.lock:
                        self.timers[name].append(duration)
                        self.counters[name] += 1
                    
                    # Âú®Ë∞ÉËØïÊ®°Âºè‰∏ãËæìÂá∫ËÄóÊó∂
                    if duration > 100:  # Âè™ËÆ∞ÂΩïË∂ÖËøá100msÁöÑÊìç‰Ωú
                        print(f"‚è±Ô∏è {name}: {duration:.2f}ms")
            return wrapper
        return decorator
    
    def record_time(self, name, duration_ms):
        """ÊâãÂä®ËÆ∞ÂΩïËÄóÊó∂"""
        with self.lock:
            self.timers[name].append(duration_ms)
            self.counters[name] += 1
    
    def get_stats(self):
        """Ëé∑ÂèñÊÄßËÉΩÁªüËÆ°"""
        stats = {}
        with self.lock:
            for name, times in self.timers.items():
                if times:
                    stats[name] = {
                        'count': len(times),
                        'total': sum(times),
                        'average': sum(times) / len(times),
                        'min': min(times),
                        'max': max(times),
                        'latest': times[-1] if times else 0
                    }
        return stats
    
    def print_stats(self):
        """ÊâìÂç∞ÊÄßËÉΩÁªüËÆ°"""
        stats = self.get_stats()
        print("\n" + "="*50)
        print("üìä ÊÄßËÉΩÁõëÊéßÁªüËÆ°")
        print("="*50)
        
        if not stats:
            print("ÊöÇÊó†ÊÄßËÉΩÊï∞ÊçÆ")
            return
        
        # ÊåâÂπ≥ÂùáËÄóÊó∂ÊéíÂ∫è
        sorted_stats = sorted(stats.items(), key=lambda x: x[1]['average'], reverse=True)
        
        for name, data in sorted_stats:
            print(f"\nüîç {name}:")
            print(f"   Ë∞ÉÁî®Ê¨°Êï∞: {data['count']}")
            print(f"   Âπ≥ÂùáËÄóÊó∂: {data['average']:.2f}ms")
            print(f"   ÊúÄÂ§ßËÄóÊó∂: {data['max']:.2f}ms")
            print(f"   ÊúÄÂ∞èËÄóÊó∂: {data['min']:.2f}ms")
            print(f"   ÊÄªËÄóÊó∂: {data['total']:.2f}ms")
            
            # ÊÄßËÉΩË≠¶Âëä
            if data['average'] > 1000:
                print(f"   ‚ö†Ô∏è Ë≠¶Âëä: Âπ≥ÂùáËÄóÊó∂Ë∂ÖËøá1ÁßíÔºÅ")
            elif data['average'] > 500:
                print(f"   ‚ö†Ô∏è Ê≥®ÊÑè: Âπ≥ÂùáËÄóÊó∂ËæÉÈïø")
    
    def clear_stats(self):
        """Ê∏ÖÁ©∫ÁªüËÆ°Êï∞ÊçÆ"""
        with self.lock:
            self.timers.clear()
            self.counters.clear()

# ÂÖ®Â±ÄÊÄßËÉΩÁõëÊéßÂÆû‰æã
performance_monitor = PerformanceMonitor()

# ‰æøÊç∑Ë£ÖÈ•∞Âô®
def monitor_performance(name):
    """ÊÄßËÉΩÁõëÊéßË£ÖÈ•∞Âô®"""
    return performance_monitor.timer(name)

# ‰∏ä‰∏ãÊñáÁÆ°ÁêÜÂô®
class PerformanceTimer:
    """ÊÄßËÉΩËÆ°Êó∂‰∏ä‰∏ãÊñáÁÆ°ÁêÜÂô®"""
    
    def __init__(self, name):
        self.name = name
        self.start_time = None
    
    def __enter__(self):
        self.start_time = time.time()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        duration = (time.time() - self.start_time) * 1000
        performance_monitor.record_time(self.name, duration)
        if duration > 100:
            print(f"‚è±Ô∏è {self.name}: {duration:.2f}ms") 