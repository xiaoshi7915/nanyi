---
description: 
globs: 
alwaysApply: false
---
# 南意秋棠开发规范

## 🎯 代码编写原则

### 核心原则
- **用户导向**: 始终站在用户角度思考，优先满足用户需求
- **简单有效**: 选择最简单的解决方案，避免过度设计
- **可读性优先**: 代码要易于理解和维护
- **中文注释**: 所有代码必须添加中文注释说明

## 📝 注释规范

### Python代码注释
```python
def get_products(page=1, size=10, filters=None):
    """
    获取产品列表
    
    参数:
        page (int): 页码，默认为1
        size (int): 每页数量，默认为10
        filters (dict): 筛选条件，包含年份、材质、主题等
    
    返回:
        dict: 包含产品列表和分页信息的字典
    """
    # 构建查询条件
    query = Product.query
    
    # 应用筛选条件
    if filters:
        if filters.get('year'):
            query = query.filter(Product.year == filters['year'])  # 按年份筛选
        if filters.get('material'):
            query = query.filter(Product.material.contains(filters['material']))  # 按材质筛选
    
    # 执行分页查询
    pagination = query.paginate(page=page, per_page=size, error_out=False)
    
    return {
        'products': [product.to_dict() for product in pagination.items],  # 转换为字典格式
        'total': pagination.total,  # 总数量
        'pages': pagination.pages,  # 总页数
        'current_page': page  # 当前页码
    }
```

### JavaScript代码注释
```javascript
/**
 * 获取产品列表数据
 * @param {Object} params - 查询参数
 * @param {number} params.page - 页码
 * @param {number} params.size - 每页数量
 * @param {Object} params.filters - 筛选条件
 * @returns {Promise} 返回产品列表的Promise对象
 */
async function fetchProducts(params = {}) {
    try {
        // 构建查询参数
        const queryParams = new URLSearchParams({
            page: params.page || 1,
            size: params.size || 12
        });
        
        // 添加筛选条件到查询参数
        if (params.filters) {
            Object.keys(params.filters).forEach(key => {
                if (params.filters[key]) {
                    queryParams.append(key, params.filters[key]);
                }
            });
        }
        
        // 发送API请求
        const response = await fetch(`/api/products?${queryParams}`);
        
        if (!response.ok) {
            throw new Error(`API请求失败: ${response.status}`);
        }
        
        // 解析响应数据
        const data = await response.json();
        return data;
        
    } catch (error) {
        console.error('获取产品列表失败:', error);
        throw error;
    }
}
```

### SQL查询注释
```python
# 查询最受欢迎的产品（按查看次数排序）
popular_products_query = """
    SELECT 
        p.id,
        p.name,
        p.image_url,
        p.view_count,
        COUNT(f.id) as favorite_count
    FROM products p
    LEFT JOIN favorites f ON p.id = f.product_id
    WHERE p.status = 'active'  -- 只查询活跃产品
    GROUP BY p.id, p.name, p.image_url, p.view_count
    ORDER BY p.view_count DESC, favorite_count DESC
    LIMIT %s
"""
```

## 📁 文件组织规范

### 后端文件结构
```
backend/
├── app.py                    # 应用主入口文件
├── config/
│   └── config.py            # 数据库和应用配置
├── models/                  # 数据模型层
│   ├── __init__.py         # 模型初始化
│   ├── product.py          # 产品模型
│   └── admin.py            # 管理员模型
├── routes/                  # 路由层（控制器）
│   ├── __init__.py         # 路由初始化
│   └── api.py              # API路由定义
├── services/                # 业务逻辑层
│   ├── __init__.py         # 服务初始化
│   └── product_service.py  # 产品相关业务逻辑
└── utils/                   # 工具函数层
    ├── __init__.py         # 工具初始化
    └── db_utils.py         # 数据库工具函数
```

### 前端文件结构
```
frontend/
├── index.html              # 主页面模板
├── server.py               # 前端服务器
├── static/                 # 静态资源
│   ├── css/
│   │   └── main.css        # 主样式文件
│   ├── js/
│   │   ├── main.js         # 主逻辑文件
│   │   ├── api.js          # API调用封装
│   │   ├── utils.js        # 工具函数
│   │   └── components/     # 组件文件夹
│   └── images/             # 图片资源（按产品系列分类）
└── admin/                  # 管理后台（如有需要）
```

## 🔧 代码风格规范

### Python代码风格
- 使用4个空格缩进，不使用Tab
- 函数名使用小写字母和下划线：`get_product_list()`
- 类名使用驼峰命名：`ProductService`
- 常量使用全大写：`DEFAULT_PAGE_SIZE = 10`
- 导入顺序：标准库 → 第三方库 → 本地模块

### JavaScript代码风格
- 使用2个空格缩进
- 变量名使用驼峰命名：`productList`
- 常量使用全大写：`const API_BASE_URL = '/api'`
- 使用现代ES6+语法：箭头函数、模板字符串、解构赋值等

### CSS代码风格
- 使用2个空格缩进
- 类名使用短横线连接：`.product-card`
- 按功能分组组织样式：基础样式 → 组件样式 → 页面样式
- 使用CSS变量定义主题色彩和尺寸

## 🏗️ 架构设计原则

### 后端架构
- **分层架构**: Models → Services → Routes → App
- **单一职责**: 每个模块只负责一个功能领域
- **依赖注入**: Service层注入到Route层
- **错误处理**: 统一的异常处理和日志记录

### 前端架构
- **组件化设计**: 可复用的UI组件
- **数据驱动**: 使用Vue.js进行响应式数据绑定
- **API封装**: 统一的API调用接口
- **状态管理**: 简单的状态管理，避免过度复杂化

### 数据库设计
- **规范化设计**: 遵循第三范式
- **索引优化**: 为查询字段添加适当索引
- **字段命名**: 使用英文名称，见名知意
- **数据类型**: 选择合适的数据类型，避免浪费空间

## 🚀 性能优化规范

### 后端性能
```python
# 使用数据库查询优化
def get_products_optimized(filters=None):
    """
    优化的产品查询函数
    - 使用索引字段进行筛选
    - 避免N+1查询问题
    - 合理使用分页
    """
    query = db.session.query(Product).options(
        # 预加载关联数据，避免N+1查询
        joinedload(Product.category),
        joinedload(Product.images)
    )
    
    # 使用索引字段进行筛选
    if filters:
        if filters.get('year'):
            query = query.filter(Product.year == filters['year'])
        if filters.get('status'):
            query = query.filter(Product.status == filters['status'])
    
    return query
```

### 前端性能
```javascript
// 图片懒加载实现
function initLazyLoading() {
    const images = document.querySelectorAll('img[data-src]');
    
    const imageObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                // 加载真实图片
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
                imageObserver.unobserve(img);
            }
        });
    });
    
    images.forEach(img => imageObserver.observe(img));
}
```

## 🔒 安全规范

### 输入验证
```python
from werkzeug.utils import secure_filename
import re

def validate_product_data(data):
    """
    验证产品数据的安全性和有效性
    """
    errors = []
    
    # 验证产品名称
    if not data.get('name') or len(data['name']) < 2:
        errors.append('产品名称至少需要2个字符')
    
    # 验证年份
    if data.get('year') and not re.match(r'^\d{4}$', str(data['year'])):
        errors.append('年份格式不正确')
    
    # 验证文件名安全性
    if data.get('image_filename'):
        secure_name = secure_filename(data['image_filename'])
        if secure_name != data['image_filename']:
            errors.append('文件名包含不安全字符')
    
    return errors
```

### SQL注入防护
```python
# 正确的参数化查询方式
def search_products_safe(keyword):
    """
    安全的产品搜索函数，防止SQL注入
    """
    # 使用参数化查询，而不是字符串拼接
    query = text("""
        SELECT * FROM products 
        WHERE name LIKE :keyword 
        OR description LIKE :keyword
    """)
    
    # 参数绑定，自动转义特殊字符
    results = db.session.execute(query, {
        'keyword': f'%{keyword}%'
    }).fetchall()
    
    return results
```

## 📊 测试规范

### 单元测试示例
```python
import unittest
from backend.services.product_service import ProductService

class TestProductService(unittest.TestCase):
    """产品服务测试类"""
    
    def setUp(self):
        """测试前准备工作"""
        self.service = ProductService()
    
    def test_get_products_with_filters(self):
        """测试带筛选条件的产品查询"""
        filters = {'year': '2023', 'material': '真丝'}
        result = self.service.get_products(filters=filters)
        
        # 验证返回结果结构
        self.assertIn('products', result)
        self.assertIn('total', result)
        
        # 验证筛选条件生效
        for product in result['products']:
            self.assertEqual(product['year'], '2023')
            self.assertIn('真丝', product['material'])
```

## 🛠️ 调试和日志规范

### 日志记录
```python
import logging
from datetime import datetime

# 配置日志格式
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/backend.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def process_product_order(order_data):
    """
    处理产品订单，包含完整的日志记录
    """
    try:
        logger.info(f"开始处理订单: {order_data.get('order_id')}")
        
        # 业务逻辑处理
        result = handle_order_logic(order_data)
        
        logger.info(f"订单处理成功: {order_data.get('order_id')}")
        return result
        
    except ValueError as e:
        logger.error(f"订单数据验证失败: {e}")
        raise
    except Exception as e:
        logger.error(f"订单处理异常: {e}", exc_info=True)
        raise
```

---

*本开发规范与 [project-management.mdc](mdc:.cursor/rules/project-management.mdc) 配合使用，确保项目代码质量和一致性*
